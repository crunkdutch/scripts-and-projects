package com.banners{	import flash.utils.Dictionary;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	public class ObjectStates extends Object	{		private var states : Dictionary;		public function ObjectStates()		{			clearStates();		}		// --------------------------------------------------------------------------------		// init methods		// --------------------------------------------------------------------------------		// public methods		/**		 * saves the states of all display objects in the container.		 * @param	dOC:DisplayObjectContainer		The timeline the states of display objects of which need to be saved.		 * @param	digDown:Boolean					Instructs to save states recursively, that is, to save the states of contained objects as well.		 * @param	forceSet:Object					You can use this Object to set some of the parameters to a desired value. ie) set the alpha of all objects to .5		 * @param	exceptions:Array				Use this array to specify exceptions. Useful when using forseSet.		 */		public function saveAllObjStatesOf(dOC : DisplayObjectContainer, digDown : Boolean = false, forceSet : Object = null, exceptions : Array = null) : void		{			// trace("ObjectStates.saveAllObjStates()...");			for (var i : uint = 0; i < dOC.numChildren; i++)			{				// trace("ObjectStates is saving child at "+i+" is named "+dOC.getChildAt(i).name);				addStateOf(dOC.getChildAt(i), digDown, forceSet, exceptions);			}		}		/**		 * saved the state of an individual DisplayObject instance.		 * @param	dO:DisplayObject				the display object the state of which needs to be saved.		 * @param	digDown:Boolean					Instructs to save recursively, that is, to save the states of contained objects as well.		 */		public function addStateOf(dO : DisplayObject, digDown : Boolean = false, forceSet : Object = null, exceptions : Array = null) : Boolean		{			// trace("ObjectStates.addState()...");			if (dO != null)			{				for each (var exceptionItem in exceptions) if (exceptionItem == dO) return false;				if (forceSet) for (var prop in forceSet) if (dO.hasOwnProperty(prop)) dO[prop] = forceSet[prop];				states[dO] = {instance:dO, matrix:dO.transform.matrix, visible:dO.visible,// ADDED by Condouris, 9/20/2011 				filters:dO.filters, alpha:dO.alpha,/*BELOW NOT USED IN RESET but very nice to have in case you need an original x value etc.*/ x:dO.x, y:dO.y, rotation:dO.rotation, width:dO.width, height:dO.height, scaleX:dO.scaleX, scaleY:dO.scaleY};				if (digDown && dO is DisplayObjectContainer)				{					saveAllObjStatesOf(DisplayObjectContainer(dO), digDown, forceSet);				}				return true;			}			else			{				return false;			}		}		/**		 * get the state of an individual DisplayObject instance in an Object format.		 * @param	dO:DisplayObject				The display object the state of which need to be retrived.		 */		public function getStateOf(dO : DisplayObject) : Object		{			// trace("ObjectStates.getState()...");			var ret : Object;			if (states[dO])			{				ret = states[dO];			}			return ret;		}		/**		 * resets all display objects to the saved states.		 * @param	dOC:DisplayObjectContainer		 * @param	resetFunc:Function				A function to be executed on all display objects that are being reset.		 * @param	digDown:Boolean					Instructs to do it recursively.		 */		public function resetAllObjStatesOf(dOC : DisplayObjectContainer, resetFunc : Function = null, digDown : Boolean = false) : void		{			// trace("ObjectStates.resetAllObjStates()...");			if (!(dOC is MovieClip) || MovieClip(dOC).totalFrames == 1)			{				// DO NOT DIG DOWN INTO A MOVIECLIP WITH A TIMELINE				for (var i : uint = 0; i < dOC.numChildren; i++)				{					// trace("ObjectStates.resetAllObjStates():"+dOC.getChildAt(i).name);					resetStateOf(dOC.getChildAt(i), resetFunc, digDown);				}			}			else			{				// FOR MOVIECLIPS WITH A TIMELINE, GO TO FRAME 1				MovieClip(dOC).gotoAndStop(1);			}		}		/**		 * resets an individual DisplayObject instance to the saved state.		 * @param		dO:DisplayObject					 * @param		resetFunc:Function			The pointer to the function that should be applied to all display object instances when reset. Eg) resetState(TweenNano.killTweensOf);		 */		public function resetStateOf(dO : DisplayObject, resetFunc : Function = null, digDown : Boolean = false) : void		{			// trace("ObjectStates.resetState()...");			if (states[dO])			{				dO.transform.matrix = states[dO].matrix;				dO.filters = states[dO].filters;				dO.alpha = states[dO].alpha;				dO.visible = states[dO].visible;				if (dO is MovieClip)				{					MovieClip(dO).gotoAndStop(1);					// MovieClip(dO).gotoAndStop(states[dO].theCurrentFrame);				}				if (resetFunc != null)				{					resetFunc(dO);				}				if (digDown && dO is DisplayObjectContainer)				{					resetAllObjStatesOf(DisplayObjectContainer(dO), resetFunc, digDown);				}			}		}		/**		 * clears all saved states		 */		public function clearStates() : void		{			if (states)			{				states = null;			}			states = new Dictionary(true);		}		// --------------------------------------------------------------------------------		// private methods				// --------------------------------------------------------------------------------		// getters and setters				// --------------------------------------------------------------------------------		// interface implementations	}}