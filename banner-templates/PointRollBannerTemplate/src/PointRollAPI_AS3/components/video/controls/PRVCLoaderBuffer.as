/** * PointRoll Video Control Loader Buffer *  * Shows a progress bar for the playback *  * @class 		PRVCLoaderBuffer * @package		PointRollAPI.components.video.controls * @author		PointRoll */  package PointRollAPI_AS3.components.video.controls  {	import PointRollAPI_AS3.events.components.PrComponentEvent;	import PointRollAPI_AS3.events.media.PrMediaEvent;	import PointRollAPI_AS3.events.media.PrProgressEvent;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.TimerEvent;	/** @private **/
	public class PRVCLoaderBuffer extends PointRollAPI_AS3.components.video.controls.PRVCUIProgress {				//internal use, needed for component structure		static var symbolName:String = "PRVCLoaderBuffer";    	static var symbolOwner:Object = PointRollAPI_AS3.components.video.controls.PRVCLoaderBuffer;				private var trackBar:MovieClip;		private var progressBar:MovieClip;				function PRVCLoaderBuffer() {			super();			addEventListener(Event.ADDED_TO_STAGE, getChildren);		}				private function getChildren(event:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, getChildren);			trackBar = MovieClip(getChildByName("trackBarOnStage"));			progressBar = MovieClip(getChildByName("progressBarOnStage"));			init();		}				protected override function init():void {			super.init();			maxWidth = trackBar.width;		}				protected override function initialize(event:TimerEvent):void {			timerNotify.stop();			timerNotify = null;			addListeners();			reset();		}				protected override function addListeners():void {			prVideoDisplay = getVideoDisplayInstance();			if(prVideoDisplay) {				prVideoDisplay.addEventListener(PrComponentEvent.INIT, onInit);				prVideoDisplay.addEventListener(PrMediaEvent.STOP, onStop);				prVideoDisplay.addEventListener(PrProgressEvent.PROGRESS, onProgress);			}		}				/**		*	Shows the progress, receives a number between 0-100		*/		protected override function showProgress(progress:Number):void {			if(progress>0) progressBar.width = maxWidth * (progress/100);		}						/**		*	Sets the width of the progress bar		*/		protected override function setSize(width:Number):void {			progressBar.width = width;			trackBar.width = width;		}					/**		*	Hides the track bar		*/		protected override function hideTrack():void {			progressBar.visible = false;		}				/**		*	Events fired by VDC		*/				private function onInit(e:PrComponentEvent):void {			reset();		}				private function onStop(e:PrMediaEvent):void {			reset();		}					private function onProgress(e:PrProgressEvent):void {			var p:Number;			if(!prVideoDisplay.isStreaming()) {				//PROGRESSIVE MODE				p = Math.round((e.bytesLoaded / e.bytesTotal) * 100);			}else{														//STREAMING MODE				p = Math.round(((e.currentTime) / e.totalTime) * 100); //+e.bufferSecs			}					showProgress(p);		}			}	 }