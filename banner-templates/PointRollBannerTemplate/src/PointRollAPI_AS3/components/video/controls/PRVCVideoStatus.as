/** * PointRoll Video Control Video Status *  * Shows the current status of the video *  * @class 		PRVCVideoStatus * @package		PointRollAPI.components.video.controls * @author		PointRoll */ package PointRollAPI_AS3.components.video.controls  {	import PointRollAPI_AS3.events.components.PrComponentEvent;	import PointRollAPI_AS3.events.media.PrMediaEvent;	import PointRollAPI_AS3.events.media.PrProgressEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	/** @private **/
	public class PRVCVideoStatus extends PointRollAPI_AS3.components.video.controls.PRVCUIText {				//internal use, needed for component structure		static var symbolName:String = "PRVCVideoStatus";    	static var symbolOwner:Object = PointRollAPI_AS3.components.video.controls.PRVCVideoStatus;				private var actualText:String;			private var loadingLabel:String		= "loading";		private var bufferingLabel:String	= "buffering";		private var completeLabel:String	= "complete";		private var playingLabel:String		= "playing";		private var pausedLabel:String		= "paused";		private var stoppedLabel:String		= "stopped";				private var _completed:Boolean;				protected var timerNotify:Timer;			//Delayed init, to wait until the VDC creates its handlers				function PRVCVideoStatus() {			super();			_completed = false;			init();		}				protected override function init():void {			super.init();			timerNotify = new Timer(300);			timerNotify.addEventListener("timer", initialize);              timerNotify.start();  		}				protected function initialize(event:TimerEvent):void {			timerNotify.stop();			timerNotify = null;			actualText = stoppedLabel;			showText(actualText);			addListeners();		}				protected override function showText(text:String):void {			gotoAndStop(text);		}				protected function addListeners():void {			prVideoDisplay = getVideoDisplayInstance();			if(prVideoDisplay) {				prVideoDisplay.addEventListener(PrComponentEvent.INIT, onInit);				prVideoDisplay.addEventListener(PrMediaEvent.START, onStart);				prVideoDisplay.addEventListener(PrMediaEvent.STOP, onStop);				prVideoDisplay.addEventListener(PrMediaEvent.PAUSE, onPause);				prVideoDisplay.addEventListener(PrMediaEvent.COMPLETE, onComplete);				prVideoDisplay.addEventListener(PrMediaEvent.PLAY, onPlay);				prVideoDisplay.addEventListener(PrMediaEvent.BUFFER_FULL, onBufferFull);				prVideoDisplay.addEventListener(PrMediaEvent.BUFFER_EMPTY, onBufferEmpty);				prVideoDisplay.addEventListener(PrProgressEvent.PROGRESS, onProgress);				prVideoDisplay.addEventListener(PrComponentEvent.PLAYBACK_START, onPlaybackStart);			}		}				/**		*	Events fired by VDC		*/		private function onInit(e:PrComponentEvent):void { 			//		}				private function onPlaybackStart(e:PrComponentEvent):void {			if(prVideoDisplay.isStreaming()) {				showText(bufferingLabel);			}		}				private function onStart(e:PrMediaEvent):void {			_completed = false;			showText(playingLabel);			actualText = playingLabel;		}				private function onStop(e:PrMediaEvent):void {			showText(stoppedLabel);			actualText = stoppedLabel;		}				private function onPause(e:PrMediaEvent):void {			showText(pausedLabel);			actualText = pausedLabel;		}				private function onComplete(e:PrMediaEvent):void {			_completed = true;			showText(completeLabel);		}				private function onPlay(e:PrMediaEvent):void {			showText(playingLabel);			actualText = playingLabel;		}				private function onBufferFull(e:PrMediaEvent):void {			showText(actualText);		}				private function onBufferEmpty(e:PrMediaEvent):void {			if(!_completed) showText(bufferingLabel);		}				private function onProgress(e:PrProgressEvent):void {			if(!prVideoDisplay.isStreaming()) {				if(e.percentLoaded - e.percentPlayed < .1) {					showText(loadingLabel);				}else{					showText(actualText);				}			}		}			}	 }