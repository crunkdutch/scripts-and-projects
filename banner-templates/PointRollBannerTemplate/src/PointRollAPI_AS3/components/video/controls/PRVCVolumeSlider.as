/** * PointRoll Volume Slider *  * Controls the volume of a video *  * @class 		PRVCVolumeSlider * @package		PointRollAPI.components.video.controls * @author		PointRoll */  package PointRollAPI_AS3.components.video.controls  {	import PointRollAPI_AS3.events.components.PrComponentEvent;	import PointRollAPI_AS3.events.media.PrMediaEvent;	import PointRollAPI_AS3.events.media.PrProgressEvent;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	/** @private **/
	public class PRVCVolumeSlider extends PointRollAPI_AS3.components.video.controls.PRVCUIProgress {				//internal use, needed for component structure		static var symbolName:String = "PRVCVolumeSlider";    	static var symbolOwner:Object = PointRollAPI_AS3.components.video.controls.PRVCVolumeSlider;				private var head:MovieClip;		private var track:MovieClip;				private var dragDriver:Boolean;				function PRVCVolumeSlider() {			super();			dragDriver = false;			addEventListener(Event.ADDED_TO_STAGE, getChildren);		}				protected override function init():void {			super.init();			maxWidth = track.width;		}				private function getChildren(event:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, getChildren);			head = MovieClip(getChildByName("headOnStage"));			track = MovieClip(getChildByName("trackOnStage"));			init();		}				protected override function initialize(event:TimerEvent):void {			timerNotify.stop();			timerNotify = null;			addListeners();						head.buttonMode = true;			head.useHandCursor = true;			head.addEventListener(MouseEvent.MOUSE_DOWN, dragHead);									reset();					}				protected override function addListeners():void {			prVideoDisplay = getVideoDisplayInstance();			if(prVideoDisplay) {				prVideoDisplay.addEventListener(PrMediaEvent.START, onStart);				prVideoDisplay.addEventListener(PrProgressEvent.PROGRESS, onProgress);				prVideoDisplay.addEventListener(PrMediaEvent.MUTE, onMute);				prVideoDisplay.addEventListener(PrComponentEvent.UNMUTE, onUnmute);				prVideoDisplay.addEventListener(PrComponentEvent.VOLUME_CHANGE, onVolumeChanged);				prVideoDisplay.addEventListener(PrMediaEvent.FADE_STEP, onFadeChanged);			}		}					private function dragHead(event:MouseEvent):void {			dragDriver = true;			prVideoDisplay.stopFading();			var ly:Number = track.y + (track.height/2);			head.startDrag(false, new Rectangle(0, 0, maxWidth, 0));			prVideoDisplay.removeEventListener(PrProgressEvent.PROGRESS, onProgress);			stage.addEventListener(MouseEvent.MOUSE_UP, undragHead);		}				private function undragHead(event:MouseEvent):void {			if(dragDriver) {				var vol:Number = head.x / maxWidth;				prVideoDisplay.setVolume(vol);				head.stopDrag();				dragDriver = false;				head.removeEventListener(MouseEvent.MOUSE_UP, undragHead);				prVideoDisplay.addEventListener(PrProgressEvent.PROGRESS, onProgress);			}		}				public function moveHead(amount:Number):void {			head.x = track.x + (maxWidth * amount);		}				public override function reset():void {			moveHead(0);		}				/**		*	Events fired by VDC		*/						private function onStart(e:PrMediaEvent):void {			if(!prVideoDisplay.isFading())				moveHead(prVideoDisplay.getVolume());		}				private function onMute(e:PrMediaEvent):void {			if(!prVideoDisplay.isFading())				moveHead(prVideoDisplay.getVolume());		}				private function onUnmute(e:PrComponentEvent):void {			if(!prVideoDisplay.isFading())				moveHead(prVideoDisplay.getVolume());		}				private function onFadeChanged(e:PrMediaEvent):void {			if(prVideoDisplay.isFading())				moveHead(prVideoDisplay.getVolume());		}				private function onVolumeChanged(e:PrComponentEvent):void {			if(!prVideoDisplay.isFading())				moveHead(prVideoDisplay.getVolume());		}				private function onProgress(e:PrProgressEvent):void {			if(!prVideoDisplay.isFading())				moveHead(prVideoDisplay.getVolume());		}			}	 }