/** * PointRoll Video Control Base Component *  * Holds a list of common methods and properties for all the controls *  * @class 		PRVCBase * @package		PointRollAPI.components.video.controls * @author		PointRoll */package PointRollAPI_AS3.components.video.controls  {	import PointRollAPI_AS3.components.video.PRVideoDisplay;	import String;	import flash.display.DisplayObjectContainer;	import flash.events.Event;	//Basic		//VD		/** @private **/
	public class PRVCBase extends PointRollAPI_AS3.components.video.controls.PRControl {						//internal use, needed for component structure		public static var symbolName:String = "";    	public static var symbolOwner:Object = null;			[Inspectable(name = "VDC Instance Name",category = "General",defaultValue = "",type=String)]		public var prVideoDisplayInstanceName:String = "";			/* Holds a reference of the path of the object, it can be changed using ActionScript */		private var _path:DisplayObjectContainer = null;			protected var prVideoDisplay:PRVideoDisplay;			function PRVCBase() {			super();			stop();		}			protected override function init():void {			super.init();			path = this.parent;			addEventListener(Event.ENTER_FRAME, verifyProperties);		}			protected function draw():void {			if(initErrors) disable();		}			/**		*	Returns an instance of the PRVideoDisplay Component		*/		protected function getVideoDisplayInstance():PRVideoDisplay {						if(!initErrors) {								if(path.getChildByName(prVideoDisplayInstanceName) is PRVideoDisplay) { 									var vdc:PRVideoDisplay = PRVideoDisplay(path.getChildByName(prVideoDisplayInstanceName));					if(vdc != null) {						return vdc;					}else{						blockExecution();						disable();						trace(this + 							  										" >" + " Could not find a Video Display Component with the following instance name: " + prVideoDisplayInstanceName);					}				}else{					trace(this + 									" >" + " Object Reference is not PRVideoDisplay");				}			}else{				blockExecution();				disable();				trace(this + 									" >" + " **Property VDC Instance Name** needs to reference a Video Display Component");			}			return null;		}					protected function verifyProperties(event:Event):void {			removeEventListener(Event.ENTER_FRAME, verifyProperties);			if(prVideoDisplayInstanceName == "") {				blockExecution();			}		}			public function disable():void {			visible = false;		}				/* Setters and Getters */				public function set path(path:DisplayObjectContainer):void { _path = path; }		public function get path():DisplayObjectContainer { return _path; }							}		}