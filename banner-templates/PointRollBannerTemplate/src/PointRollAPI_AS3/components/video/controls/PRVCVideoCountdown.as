/** * PointRoll Video Control Video Countdown *  * Shows a time countdown *  * @class 		PRVCVideoCountdown * @package		PointRollAPI.components.video.controls * @author		PointRoll */ package PointRollAPI_AS3.components.video.controls  {	import PointRollAPI_AS3.events.media.PrMediaEvent;	import PointRollAPI_AS3.events.media.PrProgressEvent;	import String;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.text.TextField;	import flash.utils.Timer;	/** @private **/
	public class PRVCVideoCountdown extends PointRollAPI_AS3.components.video.controls.PRVCUIText {				//internal use, needed for component structure		static var symbolName:String = "PRVCVideoCountdown";    	static var symbolOwner:Object = PointRollAPI_AS3.components.video.controls.PRVCVideoCountdown;				[Inspectable(name = "countMode",category = "General",defaultValue = "elapsedtotal",enumeration = "elapsedtotal, countup, countdown",type=String)]		public var countMode:String = "elapsedtotal";		[Inspectable(name = "separator",category = "General",defaultValue = "/",type=String)]		public var separator:String = "/";				protected var timerNotify:Timer;			//Delayed init, to wait until the VDC creates its handlers		private var totalTime:Number;				private var textDisplay:TextField;				function PRVCVideoCountdown() {			super();			addEventListener(Event.ADDED_TO_STAGE, getChildren);		}				private function getChildren(event:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, getChildren);			textDisplay = TextField(getChildByName("textDisplayOnStage"));			init();		}				protected override function verifyProperties(event:Event):void {			super.verifyProperties(event);			reset();		}				protected override function reset():void {			switch(countMode.toLowerCase()) {				case "countdown":					showText("00:00");					break;				case "countup":					showText("00:00");					break;				case "elapsedtotal":					showText("00:00" + " " + separator +" " + "00:00");					break;			}		}				protected override function init():void {			super.init();			timerNotify = new Timer(300);			timerNotify.addEventListener("timer", initialize);              timerNotify.start();  		}				protected function initialize(event:TimerEvent):void {			timerNotify.stop();			timerNotify = null;			addListeners();		}				protected override function showText(text:String):void {			textDisplay.text = text;		}				protected function addListeners():void {			prVideoDisplay = getVideoDisplayInstance();			if(prVideoDisplay) {				prVideoDisplay.addEventListener(PrMediaEvent.STOP, onStop);				prVideoDisplay.addEventListener(PrMediaEvent.COMPLETE, onComplete);				prVideoDisplay.addEventListener(PrProgressEvent.PROGRESS, onProgress);			}		}				/**		*	Events fired by VDC		*/				private function onStop(e:PrMediaEvent):void {			reset();		}				private function onComplete(e:PrMediaEvent):void {			switch(countMode.toLowerCase()) {				case "countdown":					showText("00:00");					break;				case "countup":					showText(formatTime(totalTime,'%m:%s'));					break;				case "elapsedtotal":					showText(formatTime(totalTime,'%m:%s') + " " + separator +" " + formatTime(totalTime,'%m:%s'));					break;			}		}				private function onProgress(e:PrProgressEvent):void {			totalTime = e.totalTime;			switch(countMode.toLowerCase()) {				case "countdown":					showText(formatTime(e.totalTime - e.currentTime,'%m:%s'));					break;				case "countup":					showText(formatTime(e.currentTime,'%m:%s'));					break;				case "elapsedtotal":					showText(formatTime(e.currentTime,'%m:%s') + " " + separator +" " + formatTime(e.totalTime,'%m:%s'));					break;			}		}				////////////////////////////////////////////				/**		 * Formats the time according to the specified string		 * @param	seconds		 * @param	format		 * @return	A String containing the time in the correct format		 */		private function formatTime(seconds:Number, format:String):String {			var min:Number = Math.floor(seconds / 60);			var sec:Number = seconds - (min * 60);			var temp:String = format;			temp = stringReplace(temp, '%m', String(min<10?"0"+min:min));			temp = stringReplace(temp, '%s', String(sec<10?"0"+sec.toString().substr(0,2):sec.toString().substr(0,2)));			if(temp.substr(temp.length-1, temp.length) == ".") temp = temp.substr(0, temp.length-1);			return temp;		}				/**		 * Search and replace		 * @param	haystack		 * @param	needle		 * @param	replacement		 * @return	A String with the replacements		 */		private function stringReplace(haystack:String, needle:String, replacement:String):String {						replacement = replacement;			var temp:Array = haystack.split(needle);			return temp.join(replacement);		}				/**		 * Formats the number to leave only the specified number of decimals		 * @param	string		 * @param	decimals		 * @return	String		 */		static public function chopDecimal(string:String, decimals:Number):String {			var temp:Array = string.split(".");			temp[1] = temp[1].substr(0,decimals);			return temp.join(".");		}			}	 }