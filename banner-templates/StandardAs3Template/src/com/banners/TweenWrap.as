package com.banners{	/*	This exists to abstract the relationship between our banners and the greensock library. By setting your tween here, and then calling	TweenWrap.to, TweenWrap.from, TweenWrap.delayedCall, etc., you get 2 things:		1. 	You can replace TweenNano or TweenLite with each other on the fly without going around finding each instance.	This means no more added k weight when a single TweenLite call forced both libraries to load.		2. 	You can kill all tweens -- EVEN DELAYED CALLS TO ANONYMOUS FUNCTIONS -- because this keeps a running array of all tweens.		 */	public class TweenWrap	{		public static var tweenArray : Array;		public static var tweenClass : Class;		public static function setTween(tweenClass : Class) : void		{			TweenWrap.tweenClass = tweenClass;			trace("tweenClass is " + tweenClass);			if (!TweenWrap.tweenArray)			{				TweenWrap.tweenArray = new Array();			}		}		public static function to(target : Object, duration : Number, vars : Object) : void		{			TweenWrap.tweenArray.push(TweenWrap.tweenClass["to"](target, duration, vars));		}		public static function from(target : Object, duration : Number, vars : Object) : void		{			TweenWrap.tweenArray.push(TweenWrap.tweenClass["from"](target, duration, vars));		}		public static function delayedCall(delay : Number, onComplete : Function, onCompleteParams : Array = null, useFrames : Boolean = false) : void		{			TweenWrap.tweenArray.push(TweenWrap.tweenClass["delayedCall"](delay, onComplete, onCompleteParams, useFrames));		}		public static function killTweensOf(target : Object, complete : Boolean = false) : void		{			var miniArray : Array = [];			TweenWrap.tweenClass["killTweensOf"](target, complete);			for (var i in TweenWrap.tweenArray)			{				if (TweenWrap.tweenArray[i] && TweenWrap.tweenArray[i]["target"] != target)				{					// TweenWrap.tweenArray.splice(i,1);					miniArray.push(TweenWrap.tweenArray[i]);				}			}			TweenWrap.tweenArray = miniArray;		}		public static function killDelayedCallsTo(target : Object, complete : Boolean = false) : void		{			TweenWrap.killTweensOf(target, complete);		}		public static function killAllTweens(complete : Boolean) : void		{			for (var i in TweenWrap.tweenArray)			{				TweenWrap.tweenClass["killTweensOf"](TweenWrap.tweenArray[i]["target"], complete);			}			TweenWrap.tweenArray = new Array;		}	}}